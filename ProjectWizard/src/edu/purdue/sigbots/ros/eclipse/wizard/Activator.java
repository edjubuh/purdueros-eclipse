package edu.purdue.sigbots.ros.eclipse.wizard;

import java.io.IOException;
import java.io.PrintStream;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.ui.console.ConsolePlugin;
import org.eclipse.ui.console.IConsole;
import org.eclipse.ui.console.IConsoleManager;
import org.eclipse.ui.console.MessageConsole;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.osgi.framework.BundleContext;

import edu.purdue.sigbots.ros.cli.management.PROSActions;

/**
 * The activator class controls the plug-in life cycle
 * 
 * Template class generated by Eclipse Plug-In Development Custom Wizard
 */
public class Activator extends AbstractUIPlugin {
	// The plug-in ID
	public static final String PLUGIN_ID = Activator.class.getCanonicalName().toLowerCase();
	// The shared instance
	private static Activator plugin;

	public void start(BundleContext context) throws Exception {
		super.start(context);
		plugin = this;
		
	}
	public void stop(BundleContext context) throws Exception {
		plugin = null;
		super.stop(context);
	}
	/**
	 * Returns the shared instance
	 *
	 * @return the shared instance
	 */
	public static Activator getDefault() {
		return plugin;
	}
	/**
	 * Returns an image descriptor for the image file at the given
	 * plug-in relative path
	 *
	 * @param path the path
	 * @return the image descriptor
	 */
	public static ImageDescriptor getImageDescriptor(String path) {
		return imageDescriptorFromPlugin(PLUGIN_ID, path);
	}
	
	public static PROSActions getPROSActions() throws IOException {
		PROSActions actions = new PROSActions(true, cliOut, cliErr);
		if(actions.getLocalRepositoryPath() == null || actions.getLocalRepositoryPath().toString().isEmpty()) {
			actions.setLocalKernelRepository(actions.suggestLocalKernelRepository());
		}
		if(actions.getUpdateSite() == null) {
			actions.setUpdateSite(actions.suggestUpdateSite().toString());
		}
		if(actions.resolveKernelLocalRequest("all").isEmpty()) {
			actions.resolveKernelUpdateRequest("latest").forEach((s) -> {
				try {
					actions.downloadKernel(s);
				} catch(IOException e) {
					e.printStackTrace();
				}
			});
		}
		return actions;
	}
	

	private static MessageConsole findConsole(String name) {
		ConsolePlugin plugin = ConsolePlugin.getDefault();
		IConsoleManager consoleManager = plugin.getConsoleManager();
		for (IConsole console : consoleManager.getConsoles()) {
			if (name.equals(console.getName())) {
				return (MessageConsole) console;
			}
		}
		MessageConsole console = new MessageConsole(name, null);
		consoleManager.addConsoles(new IConsole[] { console });
		return console;
	}

	private static final PrintStream cliOut = new PrintStream(findConsole("PROS CLI").newMessageStream());
	private static final PrintStream cliErr = new PrintStream(findConsole("PROS CLI").newMessageStream());
}

